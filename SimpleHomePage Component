import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { format, formatDistanceToNow } from "date-fns";
import { apiRequest } from "@/lib/queryClient";
import { queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Project } from "@shared/schema";
import { ProjectWithRelations } from "@/lib/types";
import SimpleProjectList from "@/components/SimpleProjectList";
import { Button } from "@/components/ui/button";
import { LogOut, ClipboardList } from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

const SimpleHomePage = () => {
  const { toast } = useToast();
  const { logoutMutation, user } = useAuth();
  const [activeTab, setActiveTab] = useState<"active" | "completed">("active");

  // Fetch active projects
  const { 
    data: activeProjects = [], 
    isLoading: activeProjectsLoading 
  } = useQuery<Project[]>({
    queryKey: ["/api/projects", false], 
    queryFn: async ({ queryKey }) => {
      const response = await fetch(`/api/projects?completed=${queryKey[1]}`);
      if (!response.ok) {
        throw new Error("Failed to fetch projects");
      }
      return response.json();
    }
  });
  
  // Fetch completed projects
  const { 
    data: completedProjects = [], 
    isLoading: completedProjectsLoading 
  } = useQuery<Project[]>({
    queryKey: ["/api/projects", true], 
    queryFn: async ({ queryKey }) => {
      const response = await fetch(`/api/projects?completed=${queryKey[1]}`);
      if (!response.ok) {
        throw new Error("Failed to fetch projects");
      }
      return response.json();
    }
  });

  // Format active projects with additional display fields
  const formattedActiveProjects: ProjectWithRelations[] = activeProjects.map(project => {
    const createdDate = new Date(project.createdAt);
    const updatedDate = new Date(project.updatedAt);
    
    return {
      ...project,
      formattedCreatedAt: format(createdDate, "MMM d, yyyy"),
      formattedUpdatedAt: format(updatedDate, "MMM d, yyyy"),
      timeAgo: formatDistanceToNow(updatedDate, { addSuffix: true })
    };
  });

  // Format completed projects with additional display fields
  const formattedCompletedProjects: ProjectWithRelations[] = completedProjects.map(project => {
    const createdDate = new Date(project.createdAt);
    const updatedDate = new Date(project.updatedAt);
    
    return {
      ...project,
      formattedCreatedAt: format(createdDate, "MMM d, yyyy"),
      formattedUpdatedAt: format(updatedDate, "MMM d, yyyy"),
      timeAgo: formatDistanceToNow(updatedDate, { addSuffix: true })
    };
  });

  // Handle marking a project as complete
  const markCompleteMutation = useMutation({
    mutationFn: async ({ id, completed }: { id: number; completed: boolean }) => {
      const response = await apiRequest(
        "PATCH", 
        `/api/projects/${id}/complete`, 
        { completed }
      );
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/projects"] });
      toast({
        title: "Project updated",
        description: "Project status has been updated successfully."
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to update project",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    }
  });

  // Handle creating a new project
  const createProjectMutation = useMutation({
    mutationFn: async (project: { title: string; description: string }) => {
      const response = await apiRequest(
        "POST",
        "/api/projects",
        project
      );
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/projects"] });
      toast({
        title: "Project created",
        description: "Your new project has been created successfully."
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to create project",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive"
      });
    }
  });

  const handleMarkComplete = (id: number, completed: boolean) => {
    markCompleteMutation.mutate({ id, completed });
  };

  const handleCreateProject = (data: { title: string; description: string }) => {
    createProjectMutation.mutate(data);
  };

  return (
    <div className="container mx-auto max-w-4xl py-8 px-4">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Project Tracker</h1>
        <div className="flex items-center gap-4">
          {user && (
            <div className="text-sm text-muted-foreground">
              Logged in as <span className="font-medium">{user.username}</span>
            </div>
          )}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => logoutMutation.mutate()}
            disabled={logoutMutation.isPending}
          >
            <LogOut className="h-4 w-4 mr-2" />
            Logout
          </Button>
        </div>
      </div>
      
      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as "active" | "completed")} className="mb-8">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="active">Active Projects</TabsTrigger>
          <TabsTrigger value="completed">Completed Projects</TabsTrigger>
        </TabsList>
        
        <TabsContent value="active">
          <SimpleProjectList 
            projects={formattedActiveProjects} 
            isLoading={activeProjectsLoading}
            onMarkComplete={handleMarkComplete}
            onCreateProject={handleCreateProject}
            isCreating={createProjectMutation.isPending}
          />
        </TabsContent>
        
        <TabsContent value="completed">
          <SimpleProjectList 
            projects={formattedCompletedProjects} 
            isLoading={completedProjectsLoading}
            onMarkComplete={handleMarkComplete}
            showCreateButton={false}
          />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default SimpleHomePage;
