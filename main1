# app.py
"""
Non-interactive CLI-based Personal Project Tracker using SQLite.

Usage examples:
  python app.py register --username alice --password secret
  python app.py add_project --username alice --password secret --title "My Project" \
      --description "Do something" --priority high --tag Work --color #00ff00
  python app.py list_projects --username alice --password secret --status all
  python app.py complete_project --username alice --password secret --id 1
  python app.py add_note --username alice --password secret --project_id 1 --content "Great progress"
  python app.py list_notes --username alice --password secret --project_id 1
  python app.py add_tag --name Personal --color #ff00ff
  python app.py list_tags
"""
import sqlite3
import hashlib
import os
import binascii
import datetime
import argparse
import sys

DB_FILE = 'tracker.db'

# -- Database Helpers --
def get_connection(path=DB_FILE):
    conn = sqlite3.connect(path)
    conn.row_factory = sqlite3.Row
    return conn


def init_db(conn):
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL
    )""")
    c.execute("""
    CREATE TABLE IF NOT EXISTS projects (
        id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        description TEXT,
        tag_name TEXT,
        tag_color TEXT,
        priority TEXT DEFAULT 'medium',
        completed INTEGER DEFAULT 0,
        created_at TEXT,
        updated_at TEXT,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )""")
    c.execute("""
    CREATE TABLE IF NOT EXISTS notes (
        id INTEGER PRIMARY KEY,
        project_id INTEGER NOT NULL,
        content TEXT NOT NULL,
        created_at TEXT,
        FOREIGN KEY(project_id) REFERENCES projects(id)
    )""")
    c.execute("""
    CREATE TABLE IF NOT EXISTS tags (
        id INTEGER PRIMARY KEY,
        name TEXT UNIQUE NOT NULL,
        color TEXT NOT NULL,
        count INTEGER DEFAULT 0
    )""")
    conn.commit()


def hash_password(password: str) -> str:
    salt = binascii.hexlify(os.urandom(16)).decode()
    dk = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000)
    return f"{binascii.hexlify(dk).decode()}:{salt}"


def verify_password(stored: str, supplied: str) -> bool:
    try:
        hashed, salt = stored.split(':')
        dk = hashlib.pbkdf2_hmac('sha256', supplied.encode(), salt.encode(), 100000)
        return binascii.hexlify(dk).decode() == hashed
    except Exception:
        return False


def authenticate(conn, username, password):
    c = conn.cursor()
    c.execute('SELECT id, password FROM users WHERE username=?', (username,))
    row = c.fetchone()
    if not row or not verify_password(row['password'], password):
        print('Authentication failed.')
        sys.exit(1)
    return row['id']

# -- Command Implementations --
def cmd_register(args):
    conn = get_connection()
    init_db(conn)
    hashed = hash_password(args.password)
    try:
        c = conn.cursor()
        c.execute('INSERT INTO users(username,password) VALUES (?,?)', (args.username, hashed))
        conn.commit()
        print(f"User '{args.username}' registered.")
    except sqlite3.IntegrityError:
        print('Username already exists.')


def cmd_add_tag(args):
    conn = get_connection()
    init_db(conn)
    c = conn.cursor()
    try:
        c.execute('INSERT INTO tags(name,color) VALUES (?,?)', (args.name, args.color))
        conn.commit()
        print(f"Tag '{args.name}' created.")
    except sqlite3.IntegrityError:
        print('Tag already exists.')


def cmd_list_tags(args):
    conn = get_connection()
    init_db(conn)
    c = conn.cursor()
    for row in c.execute('SELECT * FROM tags'):
        print(f"({row['id']}) {row['name']} [{row['color']}] count={row['count']}")


def cmd_add_project(args):
    conn = get_connection()
    init_db(conn)
    user_id = authenticate(conn, args.username, args.password)
    c = conn.cursor()
    if args.tag:
        c.execute('INSERT OR IGNORE INTO tags(name,color) VALUES (?,?)', (args.tag, args.color))
        c.execute('UPDATE tags SET count = count + 1 WHERE name=?', (args.tag,))
    now = datetime.datetime.now().isoformat()
    c.execute('INSERT INTO projects(user_id,title,description,tag_name,tag_color,priority,created_at,updated_at) "
              'VALUES (?,?,?,?,?,?,?,?)',
              (user_id, args.title, args.description, args.tag, args.color, args.priority, now, now))
    conn.commit()
    print(f"Project '{args.title}' added.")


def cmd_list_projects(args):
    conn = get_connection()
    init_db(conn)
    user_id = authenticate(conn, args.username, args.password)
    status = args.status
    query = 'SELECT * FROM projects WHERE user_id=?'
    params = [user_id]
    if status == 'active':
        query += ' AND completed=0'
    elif status == 'completed':
        query += ' AND completed=1'
    query += ' ORDER BY updated_at DESC'
    c = conn.cursor()
    for row in c.execute(query, params):
        comp = 'âœ“' if row['completed'] else ' '
        print(f"[{comp}] ({row['id']}) {row['title']} - {row['description']}")


def cmd_complete_project(args):
    conn = get_connection()
    init_db(conn)
    user_id = authenticate(conn, args.username, args.password)
    c = conn.cursor()
    c.execute('SELECT completed FROM projects WHERE id=? AND user_id=?', (args.id, user_id))
    row = c.fetchone()
    if not row:
        print('Project not found.')
        return
    new = 0 if row['completed'] else 1
    now = datetime.datetime.now().isoformat()
    c.execute('UPDATE projects SET completed=?, updated_at=? WHERE id=?', (new, now, args.id))
    conn.commit()
    print(f"Project {args.id} marked {'completed' if new else 'active'}.")


def cmd_add_note(args):
    conn = get_connection()
    init_db(conn)
    authenticate(conn, args.username, args.password)
    c = conn.cursor()
    now = datetime.datetime.now().isoformat()
    c.execute('INSERT INTO notes(project_id,content,created_at) VALUES (?,?,?)',
              (args.project_id, args.content, now))
    conn.commit()
    print(f"Note added to project {args.project_id}.")


def cmd_list_notes(args):
    conn = get_connection()
    init_db(conn)
    authenticate(conn, args.username, args.password)
    c = conn.cursor()
    for row in c.execute('SELECT * FROM notes WHERE project_id=? ORDER BY created_at', (args.project_id,)):
        print(f"({row['id']}) {row['content']} [{row['created_at']}]")

# -- Main Entrypoint --
def main():
    parser = argparse.ArgumentParser(description='Project Tracker CLI')
    subparsers = parser.add_subparsers(dest='command')

    p = subparsers.add_parser('register')
    p.add_argument('--username', required=True)
    p.add_argument('--password', required=True)

    p = subparsers.add_parser('add_tag')
    p.add_argument('--name', required=True)
    p.add_argument('--color', required=True)

    subparsers.add_parser('list_tags')

    p = subparsers.add_parser('add_project')
    p.add_argument('--username', '-u', required=True)
    p.add_argument('--password', '-p', required=True)
    p.add_argument('--title', required=True)
    p.add_argument('--description', '-d', default='')
    p.add_argument('--priority', choices=['low','medium','high'], default='medium')
    p.add_argument('--tag')
    p.add_argument('--color')

    p = subparsers.add_parser('list_projects')
    p.add_argument('--username', '-u', required=True)
    p.add_argument('--password', '-p', required=True)
    p.add_argument('--status', choices=['all','active','completed'], default='active')

    p = subparsers.add_parser('complete_project')
    p.add_argument('--username', '-u', required=True)
    p.add_argument('--password', '-p', required=True)
    p.add_argument('--id', type=int, required=True)

    p = subparsers.add_parser('add_note')
    p.add_argument('--username', '-u', required=True)
    p.add_argument('--password', '-p', required=True)
    p.add_argument('--project...
